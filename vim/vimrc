set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'


" Better file browser
Plugin 'scrooloose/nerdtree'
" Commenting
Plugin 'scrooloose/nerdcommenter'
" Class/module browser
Plugin 'majutsushi/tagbar'
" Emmet/Zen coding
Plugin 'mattn/emmet-vim'
" Statusline
Plugin 'bling/vim-airline'
" Git wrapper
Plugin 'tpope/vim-fugitive'
" Autoclose (quotes, parens, brackets, etc.)
Plugin 'Raimondi/delimitMate'
" Python mode (indentation, doc, refactor, lints, code checking, motion and
" operators, highlighting, run and ipdb breakpoints)
Plugin 'klen/python-mode'
" Provides motion hints
Plugin 'Lokaltog/vim-easymotion'
" Surround selection with {parentheses|quotes|brackets|etc.}
Plugin 'tpope/vim-surround'
" UltiSnips - TextMate style snippets
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
" Javascript syntax highlighting
Plugin 'jelera/vim-javascript-syntax'
" Javascript indenting
Plugin 'pangloss/vim-javascript'
Plugin 'nathanaelkane/vim-indent-guides'
" Javascript linting
Plugin 'scrooloose/syntastic'
" Autocompletion
Plugin 'Valloric/YouCompleteMe'

call vundle#end()            " required
filetype plugin indent on    " required

"Linting
let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
let g:pymode_lint_write = 1

" Turn off rope completion. Let YCM/Ultisnips do it
let g:pymode_rope_completion = 0

" Don't autofold code
let g:pymode_folding = 0

" automatically change window's cwd to file's dir
set autochdir

" more subtle popup colors
if has ('gui_running')
    highlight Pmenu guibg=#cccccc gui=bold
endif

" Airline setup
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
set laststatus=2
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline))"

" NERDTree setup
map <F3>  :NERDTreeToggle<CR>

" YCM setup (let ultisnips handle tab completion)
let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]

let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

let g:ycm_seed_identifiers_with_syntax = 1

" a better htmldjango detection
augroup filetypedetect
  " removes current htmldjango detection located at $VIMRUNTIME/filetype.vim
  au! BufNewFile,BufRead *.html
  au  BufNewFile,BufRead *.html   call FThtml()

  func! FThtml()
    let n = 1
    while n < 10 && n < line("$")
      if getline(n) =~ '\<DTD\s\+XHTML\s'
        setf xhtml
        return
      endif
      if getline(n) =~ '{%\|{{\|{#'
        setf htmldjango
        return
      endif
      let n = n + 1
    endwhile
    setf html
  endfunc
augroup END

" Tagbar keymap
nmap <F4> :TagbarToggle<CR>

"##############################################################################
" Easier split navigation
"##############################################################################

" Use ctrl-[hjkl] to select the active split!
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

set title                " change the terminal's title
set visualbell           " don't beep
set noerrorbells         " don't beep

let mapleader=","

set tabstop=4       " Number of spaces that a <Tab> in the file counts for.

set shiftwidth=4    " Number of spaces to use for each step of (auto)indent.

set expandtab       " Use the appropriate number of spaces to insert a <Tab>.
                    " Spaces are used in indents with the '>' and '<' commands
                    " and when 'autoindent' is on. To insert a real tab when
                    " 'expandtab' is on, use CTRL-V <Tab>.

set nowrap

set backspace=indent,eol,start

set hidden

set smarttab        " When on, a <Tab> in front of a line inserts blanks
                    " according to 'shiftwidth'. 'tabstop' is used in other
                    " places. A <BS> will delete a 'shiftwidth' worth of space
                    " at the start of the line.

set number          " Show line numbers.

set showmatch       " When a bracket is inserted, briefly jump to the matching
                    " one. The jump is only done if the match can be seen on the
                    " screen. The time to show the match can be set with
                    " 'matchtime'.

set history=3000    " keep 3000 lines of command line history

set undolevels=1000

set magic           " Enable the 'magic'

set scrolloff=3     " keep at least 3 lines above/below

set noautowrite     " don't automagically write on :next

set hlsearch        " When there is a previous search pattern, highlight all
                    " its matches.

set incsearch       " While typing a search command, show immediately where the
                    " so far typed pattern matches.

set ignorecase      " Ignore case in search patterns.

set smartcase       " Override the 'ignorecase' option if the search pattern
                    " contains upper case characters.

set autoindent      " Copy indent from current line when starting a new line
set smartindent     " (typing <CR> in Insert mode or when using the "o" or "O"
                    " command).
set shiftwidth=4
set shiftround      " Use multiple of shiftwidth when indenting with '<' and '>'
set autoread        " watch for file changes

set cursorline      " show the cursor line

set wildmenu        " menu has tab completion

set showcmd         " Show us the command we're typing
set showfulltag     " show full completion tags
set showmode        " show the mode all the time

set ruler           " Show the line and column number of the cursor position,
                    " separated by a comma.

set mouse=a         " Enable the use of the mouse.

set pastetoggle=<F2>

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

if has('autocmd')
    autocmd filetype python set expandtab
    autocmd filetype html,xml set listchars-=tab:>.
endif

if &t_Co >= 256 || has("gui_running")
    colorscheme molokai
endif

if &t_Co > 2 || has("gui_running")
   " switch syntax highlighting on, when the terminal has colors
   syntax on
endif

set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.
